"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dateformat = _interopRequireDefault(require("dateformat"));
var _chalk = _interopRequireDefault(require("chalk"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class StringBuilder {
  constructor(config) {
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "printQueue", void 0);
    _defineProperty(this, "filteredHeaderList", void 0);
    this.config = config;
    this.printQueue = [];
    this.filteredHeaderList = ['common', 'delete', 'get', 'head', 'post', 'put', 'patch', 'content-type', 'content-length', 'vary', 'date', 'connection', 'content-security-policy'];
  }
  makeLogTypeWithPrefix(logType) {
    const prefix = this.config.prefixText === false ? `[${logType}]` : `[${this.config.prefixText || 'Axios'}][${logType}]`;
    this.printQueue.push(_chalk.default.green(prefix));
    return this;
  }
  makeDateFormat(date) {
    // allow for opting-out of adding the timestamp (as most loggers already add this)
    if (this.config.dateFormat !== false) {
      // @ts-ignore
      const dateFormat = (0, _dateformat.default)(date, this.config.dateFormat || 'isoDateTime');
      this.printQueue.push(dateFormat);
    }
    return this;
  }
  makeHeader(headers) {
    if (this.config.headers && headers) {
      const headerMap = {};
      for (let key in headers) {
        if (!this.filteredHeaderList.includes(key)) {
          headerMap[key] = headers[key];
        }
      }
      this.printQueue.push(JSON.stringify(headerMap));
    }
    return this;
  }
  makeUrl(url, baseUrl) {
    if (this.config.url && url) {
      if (baseUrl) url = this.combineURLs(baseUrl, url);
      this.printQueue.push(url);
    }
    return this;
  }
  makeParams(params) {
    if (this.config.params && params) this.printQueue.push(JSON.stringify(params));
    return this;
  }
  makeMethod(method) {
    if (this.config.method && method) this.printQueue.push(_chalk.default.yellow(method.toUpperCase()));
    return this;
  }
  makeData(data) {
    if (this.config.data && data) {
      const str = typeof data === `string` ? data : JSON.stringify(data);
      this.printQueue.push(str);
    }
    return this;
  }
  makeStatus(status, statusText) {
    if (this.config.status && this.config.statusText && status && statusText) this.printQueue.push(`${status}:${statusText}`);else if (this.config.status && status) this.printQueue.push(`${status}`);else if (this.config.statusText && statusText) this.printQueue.push(statusText);
    return this;
  }
  build() {
    return this.printQueue.join(' ');
  }
  combineURLs(baseURL, relativeURL) {
    return relativeURL ? new URL(relativeURL, baseURL || undefined).toString() : baseURL;
  }
}
var _default = StringBuilder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,